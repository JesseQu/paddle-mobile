/* Copyright (c) 2018 PaddlePaddle Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */
#include <fstream>
#include <iomanip>
#include <iostream>
#include "../test_include.h"
#include <typeinfo>
#include <typeindex>

#ifdef PADDLE_MOBILE_FPGA_V1
// #include "fpga/V1/half.h"
#include "fpga/V1/api.h"
#endif

#ifdef PADDLE_MOBILE_FPGA_V2
#include "fpga/V2/api.h"
#endif

#ifdef PADDLE_MOBILE_FPGA_KD
#include "fpga-kd/api.h"
#include "fpga-kd/half.h"
#endif

void readStream(std::string filename, float *buf) {
  std::ifstream in;
  in.open(filename, std::ios::in);
  if (!in.is_open()) {
    std::cout << "open File Failed." << std::endl;
    return;
  }
  string strOne;
  int i = 0;
  while (!in.eof()) {
    in >> buf[i];
    i++;
  }
  in.close();
}

void dump(std::string filename, const Tensor input_tensor) {
  std::cout << input_tensor.type().name() << std::endl;
  DLOG << "result:::" << input_tensor.dims();
  if (input_tensor.type() == typeid(float)) {
    auto dataptr = input_tensor.data<float>();
    std::ofstream out(filename.c_str());

    int16_t* dd = (int16_t*)dataptr;
    float result = 0;
    int num = 1;
    int height = 1;
    int width = 1;
    int channel = 1;
    if (input_tensor.dims().size() == 4) {
      num = input_tensor.dims()[0];
      channel = input_tensor.dims()[1];
      height = input_tensor.dims()[2];
      width = input_tensor.dims()[3];
    }

    if (input_tensor.dims().size() == 3) {
      num = input_tensor.dims()[0];
      channel = input_tensor.dims()[2];
      height = input_tensor.dims()[1];
    }
    if (input_tensor.dims().size() == 2) {
      channel = input_tensor.dims()[0];
      height = input_tensor.dims()[1];
    }
    if (input_tensor.dims().size() == 1) {
      num = input_tensor.dims()[0];
    }

    int index = 0;
    int cw = channel * width;
    int align_cw = fpga::align_to_x(cw, 16);
    int remainder = align_cw - cw;

//    DLOG << "data_aligned:" << input_tensor.data_aligned();

    for (int n = 0; n < num; n++){
      for (int h = 0; h < height; h++) {
        for (int i = 0; i < cw; i++) {
          // out << index << std::endl;
          result = paddle_mobile::fpga::fp16_2_fp32(dd[index]);
          out << result << std::endl;
          index++;
        }
        if (true) {
          for (int i = 0; i < remainder; i++) {
            index++;
          }
        }
      }
    }
    out.close();
  } else {
    auto dataptr = input_tensor.data<int>();
    std::ofstream out(filename.c_str());

    int16_t* dd = (int16_t*)dataptr;
    int result = 0;
    for (int i = 0; i < input_tensor.numel(); ++i) {
      out << result << std::endl;
    }
    out.close();
  }
}

void run_entire(paddle_mobile::PaddleMobile<paddle_mobile::FPGA>& paddle_mobile) {
  paddle_mobile.Predict_To(-1);

    for (int i = 0; i < 104; i++) {
      // paddle_mobile.Predict_From_To(0,1);
      int out_num = 1;
      for (int n = 0;n < out_num; n++) {
        auto tensor_ptr = paddle_mobile.FetchResult(i);
        std::string saveName = "output/" + std::to_string(i) + 
        + "_" + std::to_string(n) + ".txt";
        if ((*tensor_ptr).type() == typeid(float)) {
          paddle_mobile::fpga::fpga_invalidate((*tensor_ptr).data<float>(),
                  (size_t)tensor_ptr->numel() * sizeof(half));
        }else {
          paddle_mobile::fpga::fpga_invalidate((*tensor_ptr).data<int>(),
                  (size_t)tensor_ptr->numel() * sizeof(int));
        }

        // if (!tensor_ptr->data_aligned()) {
        //   dump(saveName, (*tensor_ptr));
        // }
        dump(saveName, (*tensor_ptr));
        // DLOG << "aligned:" << tensor_ptr->data_aligned();

      }
    }

  auto result_ptr = paddle_mobile.FetchResult();
}

void run_single_step(paddle_mobile::PaddleMobile<paddle_mobile::FPGA>& paddle_mobile) {
  int start = 1;
  int end = 2;
  for(int i = start; i < end; i++) {
    Tensor input_tensor;
    int channel = 3;
    int width = 300;
    int height = 300;
    SetupTensor<float>(&input_tensor, {1, channel, height, width}, static_cast<float>(2),
                       static_cast<float>(2));
    float* data = input_tensor.mutable_data<float>({1, channel, height, width});
    int16_t* half_data = (int16_t*)data;
    for (int i = 0; i < channel * height * width; i++) {
      half_data[i] = paddle_mobile::fpga::fp32_2_fp16(1.0f);
    }
    paddle_mobile.InjectVariable(input_tensor,"data");
    paddle_mobile.Predict_From_To(start, end);

    auto tensor_ptr = paddle_mobile.FetchResult(i);
    std::string saveName = "single_step_" + std::to_string(i) + "_result.txt";
    paddle_mobile::fpga::fpga_invalidate((*tensor_ptr).data<float>(),
          (size_t) tensor_ptr->numel() * sizeof(half));
    DLOG << "result:::" << tensor_ptr->dims();
    dump(saveName, (*tensor_ptr));
  }
}

static const char *g_ssd = "../models/ssd";
int main() {
  paddle_mobile::fpga::open_device();
  paddle_mobile::PaddleMobile<paddle_mobile::FPGA> paddle_mobile;
  std::string model = std::string(g_ssd) + "/model";
  std::string params = std::string(g_ssd) + "/params";
  if (paddle_mobile.Load(model, params, true)) {
    Tensor input_tensor;
    SetupTensor<float>(&input_tensor, {1, 3, 300, 300}, static_cast<float>(1),
                       static_cast<float>(1));
    float* data = input_tensor.mutable_data<float>({1, 3, 300, 300});
    for (int i = 0; i < 3 * 300 * 300; i++) {
      data[i] = 1.0f;
    }
    paddle_mobile.FeedData(input_tensor);
    // run_entire(paddle_mobile);
    run_single_step(paddle_mobile);
  }
  paddle_mobile::fpga::close_device();
  return 0;
}
